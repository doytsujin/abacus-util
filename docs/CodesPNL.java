/*
 * Generated by Abacus.
 */
package com.landawn.abacus.entity;

import java.util.List;
import java.util.Map;
import com.landawn.abacus.util.BiMap;

import com.landawn.abacus.util.N;


/**
 * Generated by Abacus. DO NOT edit it!
 * @version ${version}
 */
public interface CodesPNL {
    public static final String _DN = "codes".intern();

    public static interface LoginPNL {
        /**
         * Name of "Login" entity. 
         */
        public static final String _ = "Login".intern();

        /**
         * Name of "id" property. 
         * type: long. 
         * column: "id". 
         */
        public static final String ID = (_ + ".id").intern();

        /**
         * Name of "accountId" property. 
         * type: long. 
         * column: "account_id". 
         */
        public static final String ACCOUNT_ID = (_ + ".accountId").intern();

        /**
         * Name of "loginId" property. 
         * type: String. 
         * column: "login_id". 
         */
        public static final String LOGIN_ID = (_ + ".loginId").intern();

        /**
         * Name of "loginPassword" property. 
         * type: String. 
         * column: "login_password". 
         */
        public static final String LOGIN_PASSWORD = (_ + ".loginPassword").intern();

        /**
         * Name of "status" property. 
         * type: int. 
         * column: "status". 
         */
        public static final String STATUS = (_ + ".status").intern();

        /**
         * Name of "lastUpdateTime" property. 
         * type: Timestamp. 
         * column: "last_update_time". 
         */
        public static final String LAST_UPDATE_TIME = (_ + ".lastUpdateTime").intern();

        /**
         * Name of "createTime" property. 
         * type: Timestamp. 
         * column: "create_time". 
         */
        public static final String CREATE_TIME = (_ + ".createTime").intern();

        /**
         * Immutable property name list
         */
        public static final List<String> _PNL = N.asUnmodifiableList(ID, ACCOUNT_ID, LOGIN_ID, LOGIN_PASSWORD, STATUS, LAST_UPDATE_TIME, CREATE_TIME);

        /**
         * Immutable property name to entityName.propName mapper
         */
         @SuppressWarnings("rawtypes")
        public static final BiMap<String, String> _PNM = N.asUnmodifiableBiMapForInterface((Map)N.asLinkedHashMap(ID, "id".intern(), ACCOUNT_ID, "accountId".intern(), LOGIN_ID, "loginId".intern(), LOGIN_PASSWORD, "loginPassword".intern(), STATUS, "status".intern(), LAST_UPDATE_TIME, "lastUpdateTime".intern(), CREATE_TIME, "createTime".intern()));

        /**
         * Immutable property name to column name mapper
         */
         @SuppressWarnings("rawtypes")
        public static final BiMap<String, String> _PCM = N.asUnmodifiableBiMapForInterface((Map)N.asLinkedHashMap(ID, "login.id".intern(), ACCOUNT_ID, "login.account_id".intern(), LOGIN_ID, "login.login_id".intern(), LOGIN_PASSWORD, "login.login_password".intern(), STATUS, "login.status".intern(), LAST_UPDATE_TIME, "login.last_update_time".intern(), CREATE_TIME, "login.create_time".intern()));

        /**
         * Immutable column name list
         */
        public static final List<String> _CNL = N.asUnmodifiableList("login.id".intern(), "login.account_id".intern(), "login.login_id".intern(), "login.login_password".intern(), "login.status".intern(), "login.last_update_time".intern(), "login.create_time".intern());

        /**
         * Immutable column name to tableName.columnName mapper
         */
         @SuppressWarnings("rawtypes")
        public static final BiMap<String, String> _CNM = N.asUnmodifiableBiMapForInterface((Map)N.asLinkedHashMap("login.id".intern(), "id".intern(), "login.account_id".intern(), "account_id".intern(), "login.login_id".intern(), "login_id".intern(), "login.login_password".intern(), "login_password".intern(), "login.status".intern(), "status".intern(), "login.last_update_time".intern(), "last_update_time".intern(), "login.create_time".intern(), "create_time".intern()));
    }

    public static interface AccountDevicePNL {
        /**
         * Name of "AccountDevice" entity. 
         */
        public static final String _ = "AccountDevice".intern();

        /**
         * Name of "id" property. 
         * type: long. 
         * column: "id". 
         */
        public static final String ID = (_ + ".id").intern();

        /**
         * Name of "accountId" property. 
         * type: long. 
         * column: "account_id". 
         */
        public static final String ACCOUNT_ID = (_ + ".accountId").intern();

        /**
         * Name of "name" property. 
         * type: String. 
         * column: "name". 
         */
        public static final String NAME = (_ + ".name").intern();

        /**
         * Name of "UDID" property. 
         * type: String. 
         * column: "udid". 
         */
        public static final String UDID = (_ + ".UDID").intern();

        /**
         * Name of "platform" property. 
         * type: String. 
         * column: "platform". 
         */
        public static final String PLATFORM = (_ + ".platform").intern();

        /**
         * Name of "model" property. 
         * type: String. 
         * column: "model". 
         */
        public static final String MODEL = (_ + ".model").intern();

        /**
         * Name of "manufacturer" property. 
         * type: String. 
         * column: "manufacturer". 
         */
        public static final String MANUFACTURER = (_ + ".manufacturer").intern();

        /**
         * Name of "produceTime" property. 
         * type: Timestamp. 
         * column: "produce_time". 
         */
        public static final String PRODUCE_TIME = (_ + ".produceTime").intern();

        /**
         * Name of "category" property. 
         * type: String. 
         * column: "category". 
         */
        public static final String CATEGORY = (_ + ".category").intern();

        /**
         * Name of "description" property. 
         * type: String. 
         * column: "description". 
         */
        public static final String DESCRIPTION = (_ + ".description").intern();

        /**
         * Name of "status" property. 
         * type: int. 
         * column: "status". 
         */
        public static final String STATUS = (_ + ".status").intern();

        /**
         * Name of "lastUpdateTime" property. 
         * type: Timestamp. 
         * column: "last_update_time". 
         */
        public static final String LAST_UPDATE_TIME = (_ + ".lastUpdateTime").intern();

        /**
         * Name of "createTime" property. 
         * type: Timestamp. 
         * column: "create_time". 
         */
        public static final String CREATE_TIME = (_ + ".createTime").intern();

        /**
         * Immutable property name list
         */
        public static final List<String> _PNL = N.asUnmodifiableList(ID, ACCOUNT_ID, NAME, UDID, PLATFORM, MODEL, MANUFACTURER, PRODUCE_TIME, CATEGORY, DESCRIPTION, STATUS, LAST_UPDATE_TIME, CREATE_TIME);

        /**
         * Immutable property name to entityName.propName mapper
         */
         @SuppressWarnings("rawtypes")
        public static final BiMap<String, String> _PNM = N.asUnmodifiableBiMapForInterface((Map)N.asLinkedHashMap(ID, "id".intern(), ACCOUNT_ID, "accountId".intern(), NAME, "name".intern(), UDID, "UDID".intern(), PLATFORM, "platform".intern(), MODEL, "model".intern(), MANUFACTURER, "manufacturer".intern(), PRODUCE_TIME, "produceTime".intern(), CATEGORY, "category".intern(), DESCRIPTION, "description".intern(), STATUS, "status".intern(), LAST_UPDATE_TIME, "lastUpdateTime".intern(), CREATE_TIME, "createTime".intern()));

        /**
         * Immutable property name to column name mapper
         */
         @SuppressWarnings("rawtypes")
        public static final BiMap<String, String> _PCM = N.asUnmodifiableBiMapForInterface((Map)N.asLinkedHashMap(ID, "account_device.id".intern(), ACCOUNT_ID, "account_device.account_id".intern(), NAME, "account_device.name".intern(), UDID, "account_device.udid".intern(), PLATFORM, "account_device.platform".intern(), MODEL, "account_device.model".intern(), MANUFACTURER, "account_device.manufacturer".intern(), PRODUCE_TIME, "account_device.produce_time".intern(), CATEGORY, "account_device.category".intern(), DESCRIPTION, "account_device.description".intern(), STATUS, "account_device.status".intern(), LAST_UPDATE_TIME, "account_device.last_update_time".intern(), CREATE_TIME, "account_device.create_time".intern()));

        /**
         * Immutable column name list
         */
        public static final List<String> _CNL = N.asUnmodifiableList("account_device.id".intern(), "account_device.account_id".intern(), "account_device.name".intern(), "account_device.udid".intern(), "account_device.platform".intern(), "account_device.model".intern(), "account_device.manufacturer".intern(), "account_device.produce_time".intern(), "account_device.category".intern(), "account_device.description".intern(), "account_device.status".intern(), "account_device.last_update_time".intern(), "account_device.create_time".intern());

        /**
         * Immutable column name to tableName.columnName mapper
         */
         @SuppressWarnings("rawtypes")
        public static final BiMap<String, String> _CNM = N.asUnmodifiableBiMapForInterface((Map)N.asLinkedHashMap("account_device.id".intern(), "id".intern(), "account_device.account_id".intern(), "account_id".intern(), "account_device.name".intern(), "name".intern(), "account_device.udid".intern(), "udid".intern(), "account_device.platform".intern(), "platform".intern(), "account_device.model".intern(), "model".intern(), "account_device.manufacturer".intern(), "manufacturer".intern(), "account_device.produce_time".intern(), "produce_time".intern(), "account_device.category".intern(), "category".intern(), "account_device.description".intern(), "description".intern(), "account_device.status".intern(), "status".intern(), "account_device.last_update_time".intern(), "last_update_time".intern(), "account_device.create_time".intern(), "create_time".intern()));
    }

    public static interface AccountPNL {
        /**
         * Name of "Account" entity. 
         */
        public static final String _ = "Account".intern();

        /**
         * Name of "id" property. 
         * type: long. 
         * column: "id". 
         */
        public static final String ID = (_ + ".id").intern();

        /**
         * Name of "gui" property. 
         * type: String. 
         * column: "gui". 
         */
        public static final String GUI = (_ + ".gui").intern();

        /**
         * Name of "firstName" property. 
         * type: String. 
         * column: "first_name". 
         */
        public static final String FIRST_NAME = (_ + ".firstName").intern();

        /**
         * Name of "lastName" property. 
         * type: String. 
         * column: "last_name". 
         */
        public static final String LAST_NAME = (_ + ".lastName").intern();

        /**
         * Name of "status" property. 
         * type: int. 
         * column: "status". 
         */
        public static final String STATUS = (_ + ".status").intern();

        /**
         * Name of "lastUpdateTime" property. 
         * type: Timestamp. 
         * column: "last_update_time". 
         */
        public static final String LAST_UPDATE_TIME = (_ + ".lastUpdateTime").intern();

        /**
         * Name of "createTime" property. 
         * type: Timestamp. 
         * column: "create_time". 
         */
        public static final String CREATE_TIME = (_ + ".createTime").intern();

        /**
         * Name of "devices" property. 
         * type: List<com.landawn.abacus.entity.AccountDevice>. 
         * column: "AccountDevice". 
         */
        public static final String DEVICES = (_ + ".devices").intern();

        /**
         * Immutable property name list
         */
        public static final List<String> _PNL = N.asUnmodifiableList(ID, GUI, FIRST_NAME, LAST_NAME, STATUS, LAST_UPDATE_TIME, CREATE_TIME, DEVICES);

        /**
         * Immutable property name to entityName.propName mapper
         */
         @SuppressWarnings("rawtypes")
        public static final BiMap<String, String> _PNM = N.asUnmodifiableBiMapForInterface((Map)N.asLinkedHashMap(ID, "id".intern(), GUI, "gui".intern(), FIRST_NAME, "firstName".intern(), LAST_NAME, "lastName".intern(), STATUS, "status".intern(), LAST_UPDATE_TIME, "lastUpdateTime".intern(), CREATE_TIME, "createTime".intern(), DEVICES, "devices".intern()));

        /**
         * Immutable property name to column name mapper
         */
         @SuppressWarnings("rawtypes")
        public static final BiMap<String, String> _PCM = N.asUnmodifiableBiMapForInterface((Map)N.asLinkedHashMap(ID, "account.id".intern(), GUI, "account.gui".intern(), FIRST_NAME, "account.first_name".intern(), LAST_NAME, "account.last_name".intern(), STATUS, "account.status".intern(), LAST_UPDATE_TIME, "account.last_update_time".intern(), CREATE_TIME, "account.create_time".intern()));

        /**
         * Immutable column name list
         */
        public static final List<String> _CNL = N.asUnmodifiableList("account.id".intern(), "account.gui".intern(), "account.first_name".intern(), "account.last_name".intern(), "account.status".intern(), "account.last_update_time".intern(), "account.create_time".intern());

        /**
         * Immutable column name to tableName.columnName mapper
         */
         @SuppressWarnings("rawtypes")
        public static final BiMap<String, String> _CNM = N.asUnmodifiableBiMapForInterface((Map)N.asLinkedHashMap("account.id".intern(), "id".intern(), "account.gui".intern(), "gui".intern(), "account.first_name".intern(), "first_name".intern(), "account.last_name".intern(), "last_name".intern(), "account.status".intern(), "status".intern(), "account.last_update_time".intern(), "last_update_time".intern(), "account.create_time".intern(), "create_time".intern()));
    }

    public static final String ACCOUNT_ID = "accountId".intern();

    public static final String CATEGORY = "category".intern();

    public static final String CREATE_TIME = "createTime".intern();

    public static final String DESCRIPTION = "description".intern();

    public static final String DEVICES = "devices".intern();

    public static final String FIRST_NAME = "firstName".intern();

    public static final String GUI = "gui".intern();

    public static final String ID = "id".intern();

    public static final String LAST_NAME = "lastName".intern();

    public static final String LAST_UPDATE_TIME = "lastUpdateTime".intern();

    public static final String LOGIN_ID = "loginId".intern();

    public static final String LOGIN_PASSWORD = "loginPassword".intern();

    public static final String MANUFACTURER = "manufacturer".intern();

    public static final String MODEL = "model".intern();

    public static final String NAME = "name".intern();

    public static final String PLATFORM = "platform".intern();

    public static final String PRODUCE_TIME = "produceTime".intern();

    public static final String STATUS = "status".intern();

    public static final String UDID = "UDID".intern();

    /**
     * Mapping of property name to column name 
     */
     @SuppressWarnings("rawtypes")
    public static final BiMap<String, String> _PCM = N.asUnmodifiableBiMapForInterface((Map) N.asLinkedHashMap(ACCOUNT_ID, "account_id".intern(), CATEGORY, "category".intern(), CREATE_TIME, "create_time".intern(), DESCRIPTION, "description".intern(), FIRST_NAME, "first_name".intern(), GUI, "gui".intern(), ID, "id".intern(), LAST_NAME, "last_name".intern(), LAST_UPDATE_TIME, "last_update_time".intern(), LOGIN_ID, "login_id".intern(), LOGIN_PASSWORD, "login_password".intern(), MANUFACTURER, "manufacturer".intern(), MODEL, "model".intern(), NAME, "name".intern(), PLATFORM, "platform".intern(), PRODUCE_TIME, "produce_time".intern(), STATUS, "status".intern(), UDID, "udid".intern()));
}
